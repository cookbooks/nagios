define service {
  name                            default-service
  active_checks_enabled           1
  passive_checks_enabled          1
  parallelize_check               1
  obsess_over_service             1
  check_freshness                 0
  notifications_enabled           1
  event_handler_enabled           1
  flap_detection_enabled          1
  failure_prediction_enabled      1
  process_perf_data               1
  retain_status_information       1
  retain_nonstatus_information    1
  is_volatile                     0
  check_period                    24x7
  max_check_attempts              <%= nagios_attr(:default_service)[:max_check_attempts] %>
  check_interval                  <%= nagios_interval(nagios_attr(:default_service)[:check_interval]) %>
  retry_interval                  <%= nagios_interval(nagios_attr(:default_service)[:retry_interval]) %>
  contact_groups                  <%= nagios_attr(:default_contact_groups).join(",") %>
  notification_options            w,u,c,r
  notification_interval           <%= nagios_interval(nagios_attr(:default_service)[:notification_interval]) %>
  notification_period             24x7
  register                        0
}

<% @service_templates.each do |name, params| %>
define service {
  register  0
  <% params.each do |n, v| %>
  <% next if n == 'template_type' %>
  <%= n %>  <%= v %>
  <% end %>
}
<% end %>

# global ping

define service {
  use default-service
  host_name *
  service_description ping
  check_command check_ping!100.0,20%!500.0,60%
}

# global server

define service {
  use                     default-service
  hostgroup_name          servers
  service_description     Free Space All Disks
  check_command           check_all_disks
}

define service {
  use                     default-service
  hostgroup_name          servers
  service_description     Load Average
  check_command           check_load
}

define service {
  use                     default-service
  hostgroup_name          servers
  service_description     Free Memory
  check_command           check_mem
}

# switches

define service {
  use                     default-service
  hostgroup_name          switches
  service_description     Environment
  check_command           check_snmp_env!<%= @nagios[:snmp_community] %>
}

# isilon clusters

define service {
  use                     default-service
  hostgroup_name          switches
  service_description     Environment
  check_command           check_snmp_env!<%= @nagios[:snmp_community] %>
}

# firewalls

# http

# db replication
