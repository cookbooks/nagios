define contact {
  name                            default-contact
  service_notification_period     24x7
  host_notification_period        24x7
  service_notification_options    w,u,c,r,f,s
  host_notification_options       d,u,r,f,s
  service_notification_commands   service-notify-by-email, service-notify-by-jabber
  host_notification_commands      host-notify-by-email, host-notify-by-sms-gateway, host-notify-by-jabber
  register                        0
}

define contact {
  name                            sms-contact
  service_notification_period     24x7
  host_notification_period        24x7
  service_notification_options    w,u,c,r,f,s
  host_notification_options       d,u,r,f,s
  service_notification_commands   service-notify-by-sms-gateway
  host_notification_commands      host-notify-by-sms-gateway
  register                        0
}

define host {
  name                            default-host
  notifications_enabled           1
  event_handler_enabled           1
  flap_detection_enabled          1
  failure_prediction_enabled      1
  process_perf_data               1
  retain_status_information       1
  retain_nonstatus_information    1
  notification_period             24x7
  register                        0
}

define host {
  name                    server
  use                     default-host
  check_period            24x7
  check_interval          <%= nagios_interval(nagios_attr(:default_host)[:check_interval]) %>
  retry_interval          <%= nagios_interval(nagios_attr(:default_host)[:retry_interval]) %>
  max_check_attempts      <%= nagios_attr(:default_host)[:max_check_attempts] %>
  check_command           check-host-alive
  notification_interval   <%= nagios_interval(nagios_attr(:default_host)[:notification_interval]) %>
  notification_options    d,u,r
  contact_groups          <%= nagios_attr(:default_contact_groups).join(",") %>
  register                0
}

define service {
  name                            default-service
  active_checks_enabled           1
  passive_checks_enabled          1
  parallelize_check               1
  obsess_over_service             1
  check_freshness                 0
  notifications_enabled           1
  event_handler_enabled           1
  flap_detection_enabled          1
  failure_prediction_enabled      1
  process_perf_data               1
  retain_status_information       1
  retain_nonstatus_information    1
  is_volatile                     0
  check_period                    24x7
  max_check_attempts              <%= nagios_attr(:default_service)[:max_check_attempts] %>
  check_interval                  <%= nagios_interval(nagios_attr(:default_service)[:check_interval]) %>
  retry_interval                  <%= nagios_interval(nagios_attr(:default_service)[:retry_interval]) %>
  contact_groups                  <%= nagios_attr(:default_contact_groups).join(",") %>
  notification_options            w,u,c,r
  notification_interval           <%= nagios_interval(nagios_attr(:default_service)[:notification_interval]) %>
  notification_period             24x7  
  register                        0
}

<% @node[:nagios][:templates].each do |name, params| %>
define <%= params[:template_type] %> {
  register  0
  <% params.each do |n, v| %>
  <% next if n == 'template_type' %>
  <%= n %>  <%= v %>
  <% end %>
}
<% end %>

define contact{
        name                            generic-contact    	; The name of this contact template
        service_notification_period     24x7			; service notifications can be sent anytime
        host_notification_period        24x7			; host notifications can be sent anytime
        service_notification_options    w,u,c,r,f,s		; send notifications for all service states, flapping events, and scheduled downtime events
        host_notification_options       d,u,r,f,s		; send notifications for all host states, flapping events, and scheduled downtime events
        service_notification_commands   service-notify-by-email, service-notify-by-jabber ; send service notifications via email
        host_notification_commands      host-notify-by-email, host-notify-by-sms-gateway, host-notify-by-jabber	; send host notifications via email
        register                        0       		; DONT REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE!
        }


define host{
        name                            generic-host    ; The name of this host template
        notifications_enabled           1       	; Host notifications are enabled
        event_handler_enabled           1       	; Host event handler is enabled
        flap_detection_enabled          1       	; Flap detection is enabled
        failure_prediction_enabled      1       	; Failure prediction is enabled
        process_perf_data               1       	; Process performance data
        retain_status_information       1       	; Retain status information across program restarts
        retain_nonstatus_information    1       	; Retain non-status information across program restarts
	notification_period		24x7		; Send host notifications at any time
        register                        0       	; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!
        }
